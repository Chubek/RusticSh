// shell.pest

// Tokens
WORD = { LATIN+ }
ASSIGNMENT_WORD = { "=" ~ WORD }
NAME = { (ASCII_ALPHANUMERIC | "_")+ }
NEWLINE = { "\n" | "\r\n" }
IO_NUMBER = { ASCII_DIGIT+ ~ (">" | "<") }

AND_IF = { "&&" }
OR_IF = { "||" }
DSEMI = { ";;" }

DLESS = { "<<" }
DGREAT = { ">>" }
LESSAND = { "<&" }
GREATAND = { ">&" }
LESSGREAT = { "<>" }
DLESSDASH = { "<<-" }

CLOBBER = { ">|" }

If = { "if" }
Then = { "then" }
Else = { "else" }
Elif = { "elif" }
Fi = { "fi" }
Do = { "do" }
Done = { "done" }

Case = { "case" }
Esac = { "esac" }
While = { "while" }
Until = { "until" }
For = { "for" }

Lbrace = { "{" }
Rbrace = { "}" }
Bang = { "!" }

In = { "in" }

// Grammar rules
complete_command = { list ~ separator? | list }
list = { list_prefix ~ separator_op ~ and_or | and_or }
list_prefix = { and_or }
and_or = { pipeline | and_or_prefix ~ AND_IF ~ linebreak ~ pipeline | and_or_prefix ~ OR_IF ~ linebreak ~ pipeline }
and_or_prefix = { pipeline }
pipeline = { command | pipe_sequence | Bang ~ pipe_sequence }
pipe_sequence = { command | pipe_sequence_prefix ~ "|" ~ linebreak ~ command }
pipe_sequence_prefix = { command }

command = { simple_command | compound_command | compound_command ~ redirect_list | function_definition }
compound_command = { brace_group | subshell | for_clause | case_clause | if_clause | while_clause | until_clause }
subshell = { "(" ~ compound_list ~ ")" }
compound_list = { term | newline_list ~ term | term ~ separator | newline_list ~ term ~ separator }

term = { term_prefix ~ separator ~ and_or | and_or }
term_prefix = { and_or }
for_clause = { For ~ name ~ linebreak ~ do_group | For ~ name ~ linebreak ~ in ~ sequential_sep ~ do_group | For ~ name ~ linebreak ~ in ~ wordlist ~ sequential_sep ~ do_group }
name = { NAME }

in = { In }
wordlist = { wordlist_prefix ~ WORD | WORD }
wordlist_prefix = { WORD }
case_clause = { Case ~ WORD ~ linebreak ~ in ~ linebreak ~ case_list ~ Esac | Case ~ WORD ~ linebreak ~ in ~ linebreak ~ case_list_ns ~ Esac | Case ~ WORD ~ linebreak ~ in ~ linebreak ~ Esac }

case_list_ns = { case_list ~ case_item_ns | case_item_ns }
case_list = { case_list_prefix ~ case_item | case_item }
case_list_prefix = { case_item_ns }
case_item_ns = { pattern ~ ")" ~ linebreak | pattern ~ ")" ~ compound_list ~ linebreak | "(" ~ pattern ~ ")" ~ linebreak | "(" ~ pattern ~ ")" ~ compound_list ~ linebreak }

case_item = { pattern ~ ")" ~ linebreak ~ DSEMI ~ linebreak | pattern ~ ")" ~ compound_list ~ DSEMI ~ linebreak | "(" ~ pattern ~ ")" ~ linebreak ~ DSEMI ~ linebreak | "(" ~ pattern ~ ")" ~ compound_list ~ DSEMI ~ linebreak }

pattern = { WORD | pattern_prefix }
pattern_prefix = { "|" ~ WORD ~ pattern_prefix }

if_clause = { If ~ compound_list ~ Then ~ compound_list ~ else_part ~ Fi | If ~ compound_list ~ Then ~ compound_list ~ Fi }
else_part = { Elif ~ compound_list ~ Then ~ else_part | Else ~ compound_list }

while_clause = { While ~ compound_list ~ do_group }
until_clause = { Until ~ compound_list ~ do_group }

function_definition = { fname ~ "(" ~ ")" ~ linebreak ~ function_body }
function_body = { compound_command | compound_command ~ redirect_list }
fname = { NAME }

brace_group = { Lbrace ~ compound_list ~ Rbrace }
do_group = { Do ~ compound_list ~ Done }

simple_command = { cmd_prefix ~ cmd_word ~ cmd_suffix | cmd_prefix ~ cmd_word | cmd_prefix | cmd_name ~ cmd_suffix | cmd_name }

cmd_name = { WORD }
cmd_word = { WORD }

prefix_redirect = { io_redirect ~ prefix_redirect_suffix }
suffix_redirect = { io_redirect ~ suffix_redirect_suffix }
prefix_assignment = { ASSIGNMENT_WORD ~ prefix_assignment_suffix }
suffix_word = { WORD ~ suffix_word_suffix }
cmd_prefix = { prefix_redirect | prefix_assignment }
cmd_suffix = { suffix_redirect | suffix_word }

prefix_redirect_suffix = { io_redirect ~ prefix_redirect_suffix }
suffix_redirect_suffix = { io_redirect ~ suffix_redirect_suffix }
prefix_assignment_suffix = { ASSIGNMENT_WORD ~ prefix_assignment_suffix }
suffix_word_suffix = { WORD ~ suffix_word_suffix }

redirect_list = { io_redirect ~ redirect_list_suffix }
redirect_list_suffix = { io_redirect ~ redirect_list_suffix }

io_redirect = { io_file | IO_NUMBER ~ io_file | io_here | IO_NUMBER ~ io_here }
io_file = { "<" ~ filename | LESSAND ~ filename | ">" ~ filename | GREATAND ~ filename | DGREAT ~ filename | LESSGREAT ~ filename | CLOBBER ~ filename }
filename = { WORD }
io_here = { DLESS ~ here_end | DLESSDASH ~ here_end }
here_end = { WORD }

newline_list = { NEWLINE ~ newline_list | NEWLINE }
linebreak = { newline_list | NEWLINE }

separator_op = { "&" | ";" }
separator = { separator_op ~ linebreak | newline_list }
sequential_sep = { ";" ~ linebreak | newline_list }

